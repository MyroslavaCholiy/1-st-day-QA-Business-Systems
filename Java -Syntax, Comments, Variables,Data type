MyClass.java

public class MyClass {
  public static void main(String[] args) {
    System.out.println("Hello World");
  }
}

public static void main(String[] args) -The main Method -  Any code inside the main() method will be executed.

System.out.println() -  Inside the main() method, we can use the println() method to print a line of text to the screen:

public static void main(String[] args) {
  System.out.println("Hello World");
}

// This is a comment System.out.println("Hello World"); - Single-line comments starts with two forward slashes (//).

Any text between // and the end of the line is ignored by Java (will not be executed).
System.out.println("Hello World"); // This is a comment

Java Multi-line Comments 
/* The code below will print the words Hello World
to the screen, and it is amazing */
System.out.println("Hello World");

//  This is a single-line comment
/*  This is a multi-line comment  */

Java Variables
String    - stores text, such as "Hello". String values are surrounded by double quotes
int       - stores integers (whole numbers), without decimals, such as 123 or -123
float     - stores floating point numbers, with decimals, such as 19.99 or -19.99
char      - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes
boolean   - stores values with two states: true or false

Declaring (Creating) Variables Syntax 

String name = "John";
System.out.println(name);

int myNum = 15;
System.out.println(myNum);

The value later:
int myNum;
myNum = 15;
System.out.println(myNum);

variables of other types:
int myNum = 5;
float myFloatNum = 5.99f;
char myLetter = 'D';
boolean myBool = true;
String myText = "Hello";

Display Variables 
println() method is often used to display variables.

String name = "John";
System.out.println("Hello " + name);

String firstName = "John ";
String lastName = "Doe";
String fullName = firstName + lastName;
System.out.println(fullName);

int x = 5;
int y = 6;
System.out.println(x + y); // Print the value of x + y

int x = 5, y = 6, z = 50;
System.out.println(x + y + z);

Java Data Types
int myNum = 5;               // Integer (whole number)
float myFloatNum = 5.99f;    // Floating point number
char myLetter = 'D';         // Character
boolean myBool = true;       // Boolean
String myText = "Hello";     // String

public class MyClass {
  public static void main(String[] args) {
    int myNum = 5;               // integer (whole number)  5
    float myFloatNum = 5.99f;    // floating point number   5.99
    char myLetter = 'D';         // character               D
    boolean myBool = true;       // boolean                 true
    String myText = "Hello";     // String                  Hello
    System.out.println(myNum);
    System.out.println(myFloatNum);
    System.out.println(myLetter);
    System.out.println(myBool);
    System.out.println(myText);
  }
}

byte, short, int, long, float, double, boolean and char -  Primitive data types. the size and type of variable values, and it has no additional methods.

String, Arrays and Classes                              -  Non-primitive data types

byte	1 byte	        Stores whole numbers            from -128 to 127
short	2 bytes	        Stores whole numbers            from -32,768 to 32,767
int	4 bytes	          Stores whole numbers            from -2,147,483,648 to 2,147,483,647
long	8 bytes	        Stores whole numbers            from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,808
float	4 bytes       	Stores fractional numbers       from 3.4e−038 to 3.4e+038. Sufficient for storing 6 to 7 decimal digits
double	8 bytes	      Stores fractional numbers       from 1.7e−308 to 1.7e+038. Sufficient for storing 15 decimal digits
boolean	1 byte	      Stores true or false values
char	2 bytes	        Stores a single character/letter

Numbers
Integer types - stores whole numbers, positive or negative -     		-  byte, short, int and long
Floating point types -represents numbers with a fractional part  		-  float and double.

byte myNum = 100;    //numbers from -128 to 127. This can be used instead of int
System.out.println(myNum);
public class MyClass {
  public static void main(String[] args) {
    byte myNum = 100;
    System.out.println(myNum);  
  }
}

short myNum = 5000;  //can store whole numbers from -32768 to 32767:
System.out.println(myNum);
public class MyClass {
  public static void main(String[] args) {
    short myNum = 5000;
    System.out.println(myNum);  
  }
}

int myNum = 100000;  //store whole numbers from -2147483648 to 2147483647. In general, and in our tutorial, the int
System.out.println(myNum);
public class MyClass {
  public static void main(String[] args) {
    int myNum = 100000;
    System.out.println(myNum);  
  }
}


long myNum = 15000000000L; //whole numbers from -9223372036854775808 to 9223372036854775808. This is used when int is not large enough to store the value. 
System.out.println(myNum);
public class MyClass {
  public static void main(String[] args) {
    long myNum = 15000000000L;
    System.out.println(myNum);  
  }
}


Floating Point Types

float myNum = 5.75f; //a decimal, such as 9.99 or 3.14515.
System.out.println(myNum);
public class MyClass {
  public static void main(String[] args) {
    float myNum = 5.75f;
    System.out.println(myNum);  
  }
}

Double
double myNum = 19.99d;  //fractional numbers from 1.7e−308 to 1.7e+038
System.out.println(myNum);
public class MyClass {
  public static void main(String[] args) {
    double myNum = 19.99d;
    System.out.println(myNum);  
  }
}

Scientific Numbers: scientific number with an "e" to indicate the power of 10:
float f1 = 35e3f;
double d1 = 12E4d;
System.out.println(f1);
System.out.println(d1);
public class MyClass {
  public static void main(String[] args) {
    float f1 = 35e3f;               35000.0
    double d1 = 12E4d;              120000.0
    System.out.println(f1);
    System.out.println(d1);  
  }
}


Booleans - declared with the boolean keyword and can only take the values true or false:
boolean isJavaFun = true;
boolean isFishTasty = false;
System.out.println(isJavaFun);     // Outputs true
System.out.println(isFishTasty);   // Outputs false

Characters - used to store a single character.
char myGrade = 'B';
System.out.println(myGrade);


char a = 65, b = 66, c = 67;
System.out.println(a);
System.out.println(b);
System.out.println(c);



Strings - data type is used to store a sequence of characters (text)

String greeting = "Hello World";
System.out.println(greeting);

Add the correct data type for the following variables:
int  myNum = 9;
float  myFloatNum = 8.99f;
char  myLetter = 'A';
boolean  myBool = false;
String  myText = "Hello World";





